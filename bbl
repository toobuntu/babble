#! /bin/ksh
#
# Babble (bbl): An upgrade routine for Homebrew, Mac App Store and macOS
#
# Copyright 2023 Todd Schulman <toobuntu> AT <gmail> DOT <com>
# License: GPLv3.0+
#
# Modification history
# 07-Dec-2023 T.S. Created original script
# 17-Dec-2023 T.S. Restart specified apps after upgrade
# 21-Jan-2024 NOTE Homebrew's behavior was changed to no longer quit
#                  apps on upgrade or reinstall (quits on uninstall).
#                  See https://github.com/Homebrew/brew/pull/16507.
# 22-Jan-2024 NOTE Homebrew 4.2.5 was released, with this change.
#                  See https://github.com/Homebrew/brew/releases/tag/4.2.5.
# 23-Jan-2024 TODO Rewrite the "restart specified apps after upgrade"
#                  code. Instead, provide a list of apps to both quit
#                  prior to and restart after `brew upgrade`.
#                  See how Homebrew does it: https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cask/artifact/abstract_uninstall.rb#L190-L265.
#                  Homebrew also offers uninstall signal: for when
#                  uninstall quit: does not work.
#                  -> Signals are sent to a different procedure in the
#                  app than putting something on the message queue. The
#                  SIGTERM signal is a generic signal used to cause
#                  program termination. Unlike SIGKILL, this signal can
#                  be blocked, handled, and ignored. It is the normal
#                  way to politely ask a program to terminate.
#                  The issue is SIGTERM is not as graceful as osascript
#                  in practice. Apps should handle SIGTERM but it is not
#                  the main message loop and many ignore it. Also the
#                  osascript method allows the app to ask the user if
#                  they are sure. Since SIGKILL cannot be handled, you
#                  should generate it only as a last resort, after first
#                  trying a less drastic method such as SIGINT (Ctrl-C)
#                  or SIGTERM.
#                  function quit_is_gui {
#                    # Return whether the user has an active GUI session.
#                    who |
#                      /usr/bin/awk -F" {3,}" -v user="$(id -un)" '
#                        {
#                          if ($2 ~ /^console$/ && $1 == user) {
#                            return 0
#                          } else {
#                            return 1
#                          }
#                        }
#                      '
#                  }
#                  if ! test quit_is_gui; then
#                    printf 1>&2 "%s\n" \
#                      "⨀=> Warning: Not logged into a GUI; skipping quitting applications."
#                  fi
#
#                  function quit_apps {
#                    # This works:
#                    # i="com.adobe.Reader"; bid="\"$i\""; echo $bid; osascript -e "if app id $bid is running then quit app id $bid"; unset -v -- i bid;
#                    for i in "$@"; do # ARGV is an array of bundleids
#                      # Return whether the app is running.
#                      # osascript -e "running of app id \"$i\"" # returns true or false
#                      if test -z /usr/bin/lsappinfo info -only bundleid "$i" | awk -F= '{gsub(/"/, ""); print(substr($0, index($0, $2)))}'; then
#                        # DEBUG
#                        # printf 1>&2 "%s\n" \
#                        #   "DEBUG: Application $i is not running."
#                        return 1
#
#                        # Attempt to quit gracefully
#                        printf 1>&2 "%s\n" \
#                          "⨀=> Quitting application $i..."
#                        if test /usr/bin/osascript -e "quit app id \"$i\""; then
#                          printf 1>&2 "%s\n" \
#                            "Application $i quit successfully."
#                        else
#                          printf 1>&2 "%s\n" \
#                            "Warning: Application $i did not quit." \
#                            "Enable Automation access for "Terminal → System Events" in:" \
#                            "  System Settings → Privacy & Security → Automation" \
#                            "if you haven't already."
#                        fi
#                      fi
#                    done
#                  }
#                  quit_apps "${restart_list_brew[@]}" # or restart_list_mas
#
#                  # Attempt to quit less gracefully, risking data loss
#                  function quit_risk_data_loss {
#                  # Workaround for cask adobe-acrobat-reader
#                  osascript << \EOS                    (main) [~/devel/github/babble]
: << \EOS
set quitbundleids to {"com.adobe.Reader", "com.adobe.AdobeRdrCEF", "com.adobe.AdobeCRDaemon", "com.adobe.AdobeRdrCEFHelper"}

try
	with timeout of 3 seconds
		repeat with i in quitbundleids
			if application id i is running then quit application id i
		end repeat
	end timeout
on error errormsg
	log errormsg
	log ("Error: Attempting to quit bundleid " & i as text) & " less gracefully, risking data loss"
	do shell script ("killall -eu \"${USER}\" -m 'Adobe*|RdrCEF*|AcroCEF*'")
end try
EOS
# -->
# ** Current investigation **
# Working, specific to Acrobat Reader:
# /usr/bin/lsappinfo list | /usr/bin/awk -F= '/[Aa]dobe|[Aa]crobat/ {if ($0 ~ /[Bb]undle[Ii][Dd]/) {gsub(/"/, ""); print(substr($0, index($0, $2))); next}}' | /usr/bin/xargs -I % /usr/bin/osascript -e "try" -e "with timeout of 3 seconds" -e "quit app id \"%\"" -e "end timeout" -e "on error errormsg" -e "log errormsg" -e "return 1" -e "end try"; /usr/bin/lsappinfo list | /usr/bin/awk -F= '/[Aa]dobe|[Aa]crobat/ {if ($0 ~ /executable path=/) {gsub(/"/, ""); print(substr($0, index($0, $2))); next}}' | /usr/bin/xargs -I % /usr/bin/pkill -u "$USER" -fx %;
# Test with: ps aux | grep -iE 'adobe|communicator|smjobblesshelper'
# <--
#                  killall -Ieu "${USER}" -m 'Adobe*|RdrCEF*|AcroCEF*' # Seems AcroCEF* is for Acrobat Pro; remove -I to be non-interactive; default signal is TERM
#                    unset -v -- quit_name pkill_args;
#                    for i in "$@"; do # ARGV is an array of bundleids
#                      typeset quit_name
#                      quit_name="$(/usr/bin/lsappinfo info -only name "$i" | awk -F= '{gsub(/"/, ""); print(substr($0, index($0, $2)))}')"
#                      typeset -a pkill_args
#                      pkill_args+=("-f")
#                      pkill_args+=("-u $(id -u)")
#                      pkill_args+=("$quit_name")
#                      pkill_args+=("2> /dev/null")
#                      /usr/bin/pkill "${pkill_args[@]}" # default signal is SIGTERM
#                      /usr/bin/pkill -SIGINT "${pkill_args[@]}"
#                      /usr/bin/pkill -SIGKILL "${pkill_args[@]}"
#                      unset -v -- quit_name pkill_args;
#                    done
#                  }
#                  # quit_risk_data_loss "${restart_list_brew[@]}" # or restart_list_mas
#
# NOTE: This doesn't work over SSH or in tmux.
# Detect terminal: case "$OSTYPE" in darwin*) if "$TERM_PROGRAM" == "$token"; then print -u "Warning: The currently active terminal program $token is queued for an upgrade. Please restart $token after it is upgraded or you will experience issues. Better yet, quit $token and perform the upgrade from a different terminal program."; fi ;; *) ;; esac
# "Restart to keep using $token ($TERM_PROGRAM). An update to $token started in the background. You'll need to restart to finish the update. Be sure to save your current work, if necessary, prior to restarting."
#
# NOTE: One cannot rely on Homebrew Git and the JSON API being in sync.
# If this causes issues, prefix the invocation of Babble (`bbl`) with
# HOMEBREW_NO_INSTALL_FROM_API=1 on a case-by-case basis.
# > In v4.0.0 (16-Feb-2023), Homebrew migrated from Git-cloned taps
# to JSON downloads (API) to enable significantly faster Homebrew-
# maintained tap updates. However, the API data can lag behind Git.
# Sometimes, a release is pulled and this is updated in Git, but the
# API hasn't yet synced and a download fails when trying to upgrade.
# To get the most up-to-date information, prefix the brew commands with
# HOMEBREW_NO_INSTALL_FROM_API=1 on a case-by-case basis.

# Initialization
# Exit cleanly if aborted with ⌃C.
trap 'exit 0' SIGINT

# Warn about missing dependencies
if ! command -v brew > /dev/null; then
  printf 1>&2 "%s\n" \
    "[Babble] Warning: Homebrew is required. See https://brew.sh." \
    "Exiting..."
  exit 2
fi

if ! command -v mas > /dev/null; then
  printf 1>&2 "%s\n" \
    "[Babble] Warning: mas-cli is required. See https://github.com/mas-cli/mas." \
    "Exiting..."
  exit 3
fi

# Declare variables and functions
# Force color output on non-TTY outputs
typeset -x HOMEBREW_COLOR=1
# As of 03 Dec 2024, the experimental Homebrew verification feature is currently hitting GitHub rate limits (60/hr), so disable it for now.
# See https://github.com/Homebrew/brew/issues/18544.
# Do not verify cryptographic attestations of build provenance for bottles
typeset -x HOMEBREW_NO_VERIFY_ATTESTATIONS=1

# Path to tput
typeset tput
tput="/usr/bin/tput"
typeset -r tput

typeset run_command next_section
# Print a colored arrow followed by normal text
# NOTE: Use escape sequences \001 and \002 (otherwise known as
# RL_PROMPT_START_IGNORE and RL_PROMPT_END_IGNORE) to exclude the
# counting of non-printing characters by read/readline.
# for i in $(seq 1 9); do tput setaf $i; echo "$i: base"; tput bold; echo "$i: bold"; tput sgr0; done
# [33m is yellow
run_command="\001$("$tput" setaf 3)\002--> \001$(
  tput sgr0
  tput bold
)\002Run\001$("$tput" sgr0)\002 command: Press Space bar to continue, or Ctrl-C to exit."
# run_command="\001$("$tput" setaf 3)\002-->\001$("$tput" sgr0)\002 [Run command] Press the Space bar to continue, or Ctrl-C to exit."
# run_command="\001\033[33m\002-->\001\033[0m\002 [Run command] Press the Space bar to continue, or Ctrl-C to exit."
# run_command="--> [Run command] Press the Space bar to continue, or Ctrl-C to exit."
#
# [35m is magenta
next_section="\001$("$tput" setaf 5)\002--> \001$(
  tput sgr0
  tput bold
)\002Next\001$("$tput" sgr0)\002 section: Press Space bar to continue, or Ctrl-C to exit."
# next_section="\001$("$tput" setaf 5)\002-->\001$("$tput" sgr0)\002 [Next §] Press the Space bar to go to the next section, or Ctrl-C to exit."
# next_section="\001\033[35m\002-->\001\033[0m\002 [Next §] Press the Space bar to go to the next section, or Ctrl-C to exit."
# next_section="--> [Next §] Press the Space bar to go to the next section, or Ctrl-C to exit."
typeset -r run_command next_section

# App restart lists (bundle ids)
# Get the app's bundle id with `osascript -e 'id of app "appname"'`
# NOTE: Babble will reopen apps--those available as Homebrew casks or
# Mac App Store apps. If a command line program must be restarted, an
# additional restart method will need to be added to handle that task.
typeset -a restart_list_brew
restart_list_brew=(
  ch.protonvpn.mac
  com.coteditor.CotEditor
  com.github.SokoloffA.Radiola
  com.knollsoft.Rectangle
  com.mowglii.ItsycalApp
  eu.exelban.Stats
  net.domzilla.caffeine
  net.hovancik.stretchly
)
typeset -r restart_list_brew
# NOTE: These come from:
# brew install --no-quarantine sokoloffa/radiola/radiola stretchly
# brew install coteditor domzilla-caffeine itsycal protonvpn rectangle stats
# NOTE: uninstall quit was removed from the casks of: vscodium, visual-studio-code, codeedit and zed because "after discussions this change will hard quit the application on upgrade and that behavior is not desired."

# Define the associative array for brew with token:bundle_id pairs
# In this case, the double quotes are not strictly necessary due to the absence of spaces or special characters in the array values.
# Use double quotes in associative array definitions when the values may contain spaces or special characters.
typeset -A brew_token_bundle_array=(
  ["protonvpn"]="ch.protonvpn.mac"
  [coteditor]=com.coteditor.CotEditor
  [radiola]=com.github.SokoloffA.Radiola
  [rectangle]=com.knollsoft.Rectangle
  [itsycal]=com.mowglii.ItsycalApp
  [stats]=eu.exelban.Stats
  ["domzilla-caffeine"]=net.domzilla.caffeine
  [stretchly]=net.hovancik.stretchly
)

typeset -a restart_list_mas
restart_list_mas=(
  iapp.monitorcontrol.MonitorControlLite
  com.sindresorhus.Pandan
)
typeset -r restart_list_mas

typeset -A mas_appid_bundle_array=(
  [1595464182]=app.monitorcontrol.MonitorControlLite
  [1569600264]=com.sindresorhus.Pandan
)

function waiter {
  /bin/stty -echo
  # Print a colored arrow followed by normal text
  # Use $(print [-e]) to interpret the escape characters in $1 which
  # colorize the arrow.
  # print: -e Interpret backslash-escaped characters. This is the
  # default behavior. It reverses the effect of an earlier -r.
  read -r -N 1 -d " " var?"$(print -- "${1:-"--> Press Space bar to continue, or Ctrl-C to exit."}")" < /dev/tty
  #read -r -N 1 -d " " var?"${1:---> Press the Space bar to continue, or Ctrl-C to exit.}" < /dev/tty
  /bin/stty echo
  print
}

function quit_apps {
  typeset bundle_id="$1"
  osascript -e "
    if app id \"$bundle_id\" is running then
      quit app id \"$bundle_id\"
    end if
    "
}

function gen_restart_list {
  # From a list of apps requiring a restart after being upgraded,
  # generate a list of those running prior to the upgrade.
  typeset cmd
  cmd="$1"
  typeset -r cmd
  shift
  printf 1>&2 "%s\n" "⨀ Before \`$cmd upgrade\`: Generating an app restart list..."
  typeset -a restart_list
  typeset open_apps_pre
  unset -v -- restart_req_export
  export restart_req_export
  restart_list=("$@")
  # NOTE: On macOS, a bundle ID uniquely identifies a single app
  # throughout the system. The bundle ID string must contain only
  # alphanumeric characters (A–Z, a–z, and 0–9), hyphens (-), and
  # periods (.). Bundle IDs are case-insensitive.
  # https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleidentifier
  open_apps_pre="$(
    /usr/bin/lsappinfo list |
      /usr/bin/awk -F= '/bundleID/ {gsub(/"/,""); print $NF}' |
      /usr/bin/sort -u
  )"
  # set -x
  # comm[on] requires files to be sorted lexically
  # Show only common lines; suppress lines only in 1 or 2
  restart_req_export="$(
    /usr/bin/comm -1 -2 \
      <(/usr/bin/tr "[:space:]" "\n" <<< "${restart_list[@]}" |
        /usr/bin/sort -u) \
      <(print "$open_apps_pre")
  )"
  # { set +x; }
  # waiter "DEBUG"
  # { set +x; }

  # Pretty print
  # No apps on the watchlist were running prior to the upgrade
  # set -x
  if test "${#restart_req_export}" -eq 0; then
    # { set +x; }
    printf 1>&2 "%2s%s\n" "" "Null: No apps on the watchlist are running..."
    print
    return
  fi
  { set +x; }
  # List the open apps by Display Name instead of Bundle ID
  # Disable word splitting by setting IFS=""
  while IFS="" read -r line; do
    /usr/bin/lsappinfo info -only name "$line" |
      /usr/bin/awk -F= '{gsub(/"/,""); printf("%2s%s\n", "", $NF) > "/dev/stderr"}'
  done <<< "$restart_req_export"
  print
}

function restarter {
  # waiter "$run_command"

  typeset cmd
  cmd="$1"
  typeset -r cmd

  # No apps on the watchlist were running prior to the upgrade
  # set -x
  if test "${#restart_req_export}" -eq 0; then
    # { set +x; }
    print
    printf 1>&2 "%s\n" "⨀ After \`$cmd upgrade\`: No apps need to be restarted..."
    return
  fi
  { set +x; }

  # Restart apps from the saved list
  typeset open_apps_post restart_req
  open_apps_post="$(
    /usr/bin/lsappinfo list |
      /usr/bin/awk -F= '/bundleID/ {gsub(/"/,""); print $NF}' |
      /usr/bin/sort -u
  )"
  # waiter "DEBUG"
  # set -x
  # Show only lines in 1; suppress lines only in 2 or common to both
  restart_req="$(
    /usr/bin/comm -2 -3 \
      <(/usr/bin/tr "[:space:]" "\n" <<< "$restart_req_export") \
      <(print "$open_apps_post")
  )"
  # { set +x; }

  # No apps to restart; still running after upgrade
  # print "restart_req=$restart_req"
  # print
  # print "restart_req_export=$restart_req_export"
  # set -x
  if test "${#restart_req}" -eq 0; then
    # { set +x; }
    print
    printf 1>&2 "%s\n" "⨀ After \`$cmd upgrade\`: No apps need to be restarted..."
    return
  fi
  { set +x; }

  unset -v -- restart_req_export

  # There is something to restart
  print
  printf "%s\n" "⨀ After \`$cmd upgrade\`: Restarting apps from the restart list..."
  # Disable word splitting by setting IFS=""
  while IFS="" read -r line; do
    set -x
    /usr/bin/open -b "$line" 2> /dev/null
    { set +x; }
  done <<< "$restart_req"
}

# Intro
/usr/bin/tput clear
printf "%s\n" \
  "-----------------------------------------------------------------------" \
  "| ⨀ Babble: An upgrade routine for Homebrew, Mac App Store and macOS. |" \
  "-----------------------------------------------------------------------"
/bin/date
print

# Homebrew
# Want to output `cmd` without expansion
# Silence warning that backticks don't expand in single quotes.
# shellcheck disable=SC2016
printf "%s\n" \
  "Updating Homebrew -- The Missing Package Manager for macOS..." \
  'Would run `brew update`, and then `brew desc --eval-all` for any new packages'
waiter "$run_command"
set -x
brew update 2>&1 | /usr/bin/tee "${TMPDIR:-/tmp/}bup.out"
{ set +x; }

# set -x
# Run `brew desc --eval-all` on new formulae and casks
# NOTE: When f == 1, the "1" is a condition that is always true, and
# will trigger the default action which is to print the current line.
/usr/bin/awk '
# New formulae or casks
{
  if ($1 ~ /==>/) {
    if ($2 ~ /New/) {
      if ($3 ~ /Formulae/) {
        f = 1
        next
      }
      if ($3 ~ /Casks/) {
        c = 1
        f = 0
        next
      }
    }

    # Keep printing until the New Formulae or New Casks section ends
    # https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/update-report.rb

    if ($2 ~ /(Outdated|Renamed|Deleted|Modified)/) {
      f = 0
      c = 0
      next
    }
  }
}

{
  if ($0 ~ /^You have/) {
    f = 0
    c = 0
    next
  }
}

{
  if ($0 ~ /^Already up-to-date.$/) {
    f = 0
    c = 0
    next
  }
}

{
  # New Homebrew version released; match its semver in the announcement.
  if ($0 ~ /The (0|[1-9][[:digit:]]*)\.(0|[1-9][[:digit:]]*)\.(0|[1-9][[:digit:]]*).* (changelog|release notes)/) {
    f = 0
    c = 0
    # Done processing this record; will match the url later to open it
    next
  }
}

f {
  formulae[FNR] = $0
}

c {
  casks[FNR] = $0
}

# New Homebrew version
{
  # New major or minor version: open the release notes
  # Match a semver in the url
  if ($0 ~ /https:\/\/brew\.sh\/blog\/(0|[1-9][[:digit:]]*)\.(0|[1-9][[:digit:]]*)\.(0)/) {
    # Strip ANSI escape sequences (the URL is formatted in underscore)
    # See https://github.com/Homebrew/brew/blob/master/Library/Homebrew/utils/formatter.rb#L61-#L63. Invoked as #{Formatter.url("https://...")}.
    # NOTE: Underscore: `tput smul` or `\033[4m` or `\x1b[4m`
    gsub(/\x01?(\x1B\(B)?\x1B\[([0-9;]*)?[JKmsu]\x02?/, "")
    # NOTE: This gsub suffices. Depending on Formula.ansifilter (208k,
    # writen in C++) is therefore unnecessary.
    # $1 = $1; af = ("$HOMEBREW_PREFIX/bin/ansifilter <<< " $0); af | getline rn; close(af); next
    # Remove leading and trailing whitespace
    # NOTE: Force awk to rebuild the entire record, using the current values of the fields and OFS
    # NOTE: When a value is assigned to a field variable, i.e., the value of $1 is assigned to field $1, awk rebuilds its $0 by concatenating the fields with the default output field separator (OFS), a space.
    $1 = $1 # force record to be reconstituted
    rn = $0
    next
  }
}

{
  # New patch version: open the changelog
  if ($0 ~ /https:\/\/github\.com\/Homebrew\/brew\/releases\/tag/) {
    # Strip ANSI escape sequences (the URL is formatted in underscore)
    gsub(/\x01?(\x1B\(B)?\x1B\[([0-9;]*)?[JKmsu]\x02?/, "")
    # Remove leading and trailing whitespace
    $1 = $1 # force record to be reconstituted
    ch = $0
    next
  }
}

END {
  # Print descriptions of new formulae or casks
  # New Formulae
  for (i in formulae) {
    cf = 1
    break
  }
  if (cf) {
    if (! pf) {
      # Print a colored alert arrow followed by bold text
      # [36m is cyan; [1m is bold
      printf "\n\001\033[36m\002%s\001\033[0m\002 \001\033[1m\002%s\001\033[0m\002\n", "⨀=>", "Descriptions of New Formulae"
      pf = 1
    }
    cmd = "/usr/bin/xargs -0 -J % brew desc --eval-all --formula %"
    for (i in formulae) {
      printf("%s%c", formulae[i], 0) | cmd
    }
    close(cmd)
  }

  # New Casks
  for (i in casks) {
    cc = 1
    break
  }
  if (cc) {
    if (! pc) {
      # Print a colored alert arrow followed by bold text
      # [36m is cyan; [1m is bold
      printf "\n\001\033[36m\002%s\001\033[0m\002 \001\033[1m\002%s\001\033[0m\002\n", "⨀=>", "Descriptions of New Casks"
      pc = 1
    }
    cmd = "/usr/bin/xargs -0 -J % brew desc --eval-all --cask %"
    for (i in casks) {
      printf("%s%c", casks[i], 0) | cmd
    }
    close(cmd)
  }

  # New Homebrew version; open info in web browser
  # NOTE: Does not consider HOMEBREW_BROWSER or BROWSER env vars
  if (rn) {
    # Semver: New major or minor version
    printf "\n"
    print "⨀=> New Homebrew version: opening release notes in web browser..."
    cmd = "/usr/bin/xargs -0 -I % /usr/bin/open -u '\''%'\'' 2> /dev/null"
    printf("%s%c", rn, 0) | cmd
    close(cmd)
  }

  if (ch) {
    # Semver: New patch version
    printf "\n"
    print "⨀=> New Homebrew patch version: opening changelog in web browser..."
    cmd = "/usr/bin/xargs -0 -I % /usr/bin/open -u '\''%'\'' 2> /dev/null"
    printf("%s%c", ch, 0) | cmd
    close(cmd)
  }
}
' "${TMPDIR:-/tmp/}bup.out"
#{ set +x; }

# waiter 'DEBUG: `rm bup.out`'
/bin/rm -f "${TMPDIR:-/tmp/}bup.out"
waiter "$next_section"

print
# Want to output `cmd` without expansion
# Silence warning that backticks don't expand in single quotes.
# shellcheck disable=SC2016
printf "%s\n" \
  "Listing installed packages which are outdated..." \
  'Would run `brew outdated`'
waiter "$run_command"
# set -x
# # By default, version information is displayed in interactive shells, and suppressed otherwise. Use --verbose to include detailed version information.
# brew outdated --greedy-auto-updates --fetch-HEAD --verbose
# { set +x; }
# waiter "$next_section"

# COPY/PASTE START
unset -v -- outie
typeset outie
outie="$(
  set -x
  # By default, version information is displayed in interactive shells, and suppressed otherwise. Use --verbose to include detailed version information.
  brew outdated --greedy-auto-updates --fetch-HEAD --verbose
  { set +x; }
)"

if test -n "$outie"; then
  printf "%s\n" "$outie"
  waiter "$next_section"
  print
  # Want to output `cmd` without expansion
  # Silence warning that backticks don't expand in single quotes.
  # shellcheck disable=SC2016
  printf "%s\n" \
    "Upgrading outdated packages..." \
    'Would run `brew upgrade`'
  waiter "$run_command"
  # COPY/PASTE END

  # print
  # # Want to output `cmd` without expansion
  # # Silence warning that backticks don't expand in single quotes.
  # # shellcheck disable=SC2016
  # printf "%s\n" \
  #   "Upgrading outdated packages..." \
  #   'Would run `brew upgrade`'
  # waiter "$run_command"

  gen_restart_list "brew" "${restart_list_brew[@]}"

  # Attempt to gracefully quit the running apps on the watchlist
  typeset -a outdated_tokens
  # outdated_tokens=($(brew info --cask --json=v2 --installed | jq -r '.casks[] | select(.outdated == true) | .token' | awk 'NF > 0'))
  # SC2207: Explicitly split command output instead of relying on shell globbing. Homebrew tokens should not pose a problem, but do it anyway to silence the shellcheck complaint.
  brew info --cask --json=v2 --installed | jq -r '.casks[] | select(.outdated == true) | .token' | awk 'NF > 0' | while IFS="" read -r line; do outdated_tokens+=("$line"); done
  if test "${#outdated_tokens[@]}" -gt 0; then
    for token in "${outdated_tokens[@]}"; do
      for bundleid in ${brew_token_bundle_array["$token"]}; do
        if test -n "$bundleid"; then
          quit_apps "$bundleid"
        fi
      done
    done
  fi

  set -x
  # The following routine is due to https://github.com/orgs/Homebrew/discussions/5226
  function repeat_command {
    typeset cmd="$1"
    typeset fallback_func="$2"
    typeset -i attempts="$3"
    # Counter
    typeset -i i=0

    while [ "$i" -lt "$attempts" ]; do
      if $cmd; then
        break
      else
        $fallback_func
        # [35m is magenta
        printf 1>&2 "\001\033[35m\002%s\001\033[0m\002 \001\033[1;35m\002%u attempts remaining.\001\033[0m\002\n" \
          "⨀=>" \
          $((attempts - i))
        i=$((i + 1))
      fi
    done
  }
  typeset command_to_repeat="brew upgrade --greedy-auto-updates --fetch-HEAD --no-quarantine --display-times"
  function fallback_commands {
    # Print a colored symbol (U+2A00) followed by normal text
    # [36m is cyan
    # Want to output `cmd` without expansion
    # Silence warning that backticks don't expand in single quotes.
    # shellcheck disable=SC2016
    printf 1>&2 "\001\033[36m\002%s\001\033[0m\002 %s\n" \
      "⨀=>" \
      '`brew upgrade` encountered a problem. Cleaning cache...'
    /bin/rm -rf "$HOME/Library/Caches/Homebrew/bootsnap"
  }
  typeset -i max_attempts=10
  repeat_command "$command_to_repeat" fallback_commands "$max_attempts"
  { set +x; }

  restarter "brew"
fi
waiter "$next_section"

# Mac App Store
print
# Want to output `cmd` without expansion
# Silence warning that backticks don't expand in single quotes.
# shellcheck disable=SC2016
printf "%s\n" \
  "Listing outdated Mac App Store apps..." \
  'Would run `mas outdated`'
waiter "$run_command"
unset -v -- outie
typeset outie
outie="$(
  set -x
  mas outdated
  # mas outdated | /usr/bin/awk 'NF > 0' # Remove blank lines
  # Alternatively, mas outdated | /usr/bin/grep --invert-match '^[[:space:]]*$' # Remove blank lines
  { set +x; }
)"

if test -n "$outie"; then
  printf "%s\n" "$outie"
  waiter "$next_section"
  print
  # Want to output `cmd` without expansion
  # Silence warning that backticks don't expand in single quotes.
  # shellcheck disable=SC2016
  printf "%s\n" \
    "Upgrading outdated Mac App Store apps..." \
    'Would run `mas upgrade`'
  waiter "$run_command"

  gen_restart_list "mas" "${restart_list_mas[@]}"

  # Attempt to gracefully quit the running apps on the watchlist
  typeset -a outdated_appids
  # SC2207: Explicitly split command output instead of relying on shell globbing. Mac App Store appids should not pose a problem, but do it anyway to silence the shellcheck complaint.
  # outdated_appids=($(mas outdated | awk 'NF > 0 {print $1}')) # NF > 0 to remove blank lines
  mas outdated | awk 'NF > 0 {print $1}' | while IFS="" read -r line; do outdated_appids+=("$line"); done # NF > 0 to remove blank lines
  if test "${#outdated_appids[@]}" -gt 0; then
    for appid in "${outdated_appids[@]}"; do
      for bundleid in ${mas_appid_bundle_array["$appid"]}; do
        if test -n "$bundleid"; then
          quit_apps "$bundleid" # 2> /dev/null
        fi
      done
    done
  fi

  #  for app in "${restart_list_mas[@]}"; do
  #    quit_apps "$app"
  #  done

  set -x
  mas upgrade
  { set +x; }

  restarter "mas"
fi
waiter "$next_section"

# macOS
print
# Want to output `cmd` without expansion
# Silence warning that backticks don't expand in single quotes.
# shellcheck disable=SC2016
printf "%s\n" \
  "Listing all available updates to macOS..." \
  'Would run `softwareupdate --list`'
waiter "$run_command"
set -x
/usr/sbin/softwareupdate --list 2> "${TMPDIR:-/tmp/}su.err"
{ set +x; }
if test -f "${TMPDIR:-/tmp/}su.err"; then
  /bin/cat "${TMPDIR:-/tmp/}su.err"
fi
#waiter "$next_section"

if ! /usr/bin/grep --quiet --fixed-string "No new software available." "${TMPDIR:-/tmp/}su.err"; then
  /bin/rm -f "${TMPDIR:-/tmp/}su.err"
  waiter "$next_section"
  print
  # Want to output `cmd` without expansion
  # Silence warning that backticks don't expand in single quotes.
  # shellcheck disable=SC2016
  printf "%s\n" \
    "Installing all available updates to macOS..." \
    "A system restart may occur if required to complete installation." \
    'Would run `sudo softwareupdate --install`'
  waiter "$run_command"
  set -x
  /usr/bin/sudo /usr/sbin/softwareupdate --all --install --restart --no-scan
  { set +x; }
fi

/bin/rm -f "${TMPDIR:-/tmp/}su.err"

# Conclusion
print
# Print a colored symbol (U+2A00) followed by normal text
# [36m is cyan
printf "\001\033[36m\002%s\001\033[0m\002 %s\n" \
  "⨀" \
  "Babble: All finished! Exiting..."
date
#printf "\n%s\n" "[🔄 Babble] All finished! Exiting..."
