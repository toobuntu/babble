#! /bin/ksh -p
#
# Babble (bbl): An upgrade routine for Homebrew, Mac App Store and macOS
#
# Copyright 2023 Todd Schulman <toobuntu> AT <gmail> DOT <com>
# License: GPLv3.0+
#
# Modification history
# 07-Dec-2023 T.S. Created original script
#
# NOTE: One cannot rely on Homebrew Git and the JSON API being in sync.
# If this causes issues, prefix the invocation of Babble (`bbl`) with
# HOMEBREW_NO_INSTALL_FROM_API=1 on a case-by-case basis.
# > In v4.0.0 (16-Feb-2023), Homebrew migrated from Git-cloned taps
# to JSON downloads (API) to enable significantly faster Homebrew-
# maintained tap updates. However, the API data can lag behind Git.
# Sometimes, a release is pulled and this is updated in Git, but the
# API hasn't yet synced and a download fails when trying to upgrade.
# To get the most up-to-date information, prefix the brew commands with
# HOMEBREW_NO_INSTALL_FROM_API=1 on a case-by-case basis.

# Initialization
# Exit cleanly if aborted with âŒƒC.
trap 'exit 0' SIGINT

# Warn about missing dependencies
if ! command -v brew > /dev/null; then
	printf 1>&2 "%s\n" "[Babble] Warning: Homebrew is required. See https://brew.sh." "Exiting..."
	exit 2
fi

if ! command -v mas > /dev/null; then
	printf 1>&2 "%s\n" "[Babble] Warning: mas-cli is required. See https://github.com/mas-cli/mas." "Exiting..."
	exit 3
fi

# Declare variables and functions
typeset run_command next_section
# NOTE: Use escape sequences \001 and \002 (otherwise known as
# RL_PROMPT_START_IGNORE and RL_PROMPT_END_IGNORE) to exclude the
# counting of non-printing characters.
run_command="\001\033[33m\002-->\001\033[0m\002 [Run command] Press the Space bar to continue, or Ctrl-C to exit."
#run_command="--> [Run command] Press the Space bar to continue, or Ctrl-C to exit."
next_section="\001\033[35m\002-->\001\033[0m\002 [Next Â§] Press the Space bar to go to the next section, or Ctrl-C to exit."
#next_section="--> [Next Â§] Press the Space bar to go to the next section, or Ctrl-C to exit."
typeset -r run_command next_section

function waiter {
	/bin/stty -echo
	read -r -N 1 -d " " var?"$(print -e ${1:---> Press the Space bar to continue, or Ctrl-C to exit.})" < /dev/tty
	#read -r -N 1 -d " " var?"${1:---> Press the Space bar to continue, or Ctrl-C to exit.}" < /dev/tty
	/bin/stty echo
	print
}

# Intro
/usr/bin/tput clear
printf "%s\n" "-----------------------------------------------------------------------"
printf "%s\n" "| â¨€ Babble: An upgrade routine for Homebrew, Mac App Store and macOS. |"
printf "%s\n" "-----------------------------------------------------------------------"
print

# Homebrew
printf "%s\n" "Updating Homebrew -- The Missing Package Manager for macOS..." 'Would run `brew update`, and then `brew desc --eval-all` for any new packages'
waiter "$run_command"
set -x
brew update 2>&1 | /usr/bin/tee "${TMPDIR:-/tmp/}bup.out"
{ set +x; }
print
set -x
/usr/bin/awk '/==> New/{f = 1; next} /==> (Outdated|Renamed|Deleted|Modified)/{f = 0} /^You have/{f = 0} f' "${TMPDIR:-/tmp/}bup.out" | /usr/bin/xargs -J % brew desc --eval-all %
{ set +x; }
/bin/rm -f "${TMPDIR:-/tmp/}bup.out"
waiter "$next_section"

print
printf "%s\n" "Listing installed packages which are outdated..." 'Would run `brew outdated`'
# By default, version information is displayed in interactive shells, and suppressed otherwise. Use --verbose to include detailed version information.
waiter "$run_command"
set -x
brew outdated --greedy-auto-updates --fetch-HEAD --verbose
{ set +x; }
waiter "$next_section"

print
printf "%s\n" "Upgrading outdated packages..." 'Would run `brew upgrade`'
waiter "$run_command"
set -x
brew upgrade --greedy-auto-updates --fetch-HEAD --no-quarantine --display-times
{ set +x; }
waiter "$next_section"


# Mac App Store
print
printf "%s\n" "Listing outdated Mac App Store apps..." 'Would run `mas outdated`'
waiter "$run_command"
typeset outie
outie="$(set -x; mas outdated; { set +x; })"

if test -n "$outie"; then
	printf "%s\n" "$outie"
	waiter "$next_section"
	print
	printf "%s\n" "Upgrading outdated Mac App Store apps..." 'Would run `mas upgrade`'
	waiter "$run_command"
	set -x
	mas upgrade
	{ set +x; }
fi
waiter "$next_section"


# macOS
print
printf "%s\n" "Listing all available updates to macOS..." 'Would run `softwareupdate --list`'
waiter "$run_command"
set -x
/usr/sbin/softwareupdate --list 2> "${TMPDIR:-/tmp/}su.err"
{ set +x; } 2> /dev/null
test -f "${TMPDIR:-/tmp/}su.err" && /bin/cat "${TMPDIR:-/tmp/}su.err" || :
#waiter "$next_section"

if ! /usr/bin/grep --quiet --fixed-string "No new software available." "${TMPDIR:-/tmp/}su.err"; then
	/bin/rm -f "${TMPDIR:-/tmp/}su.err"
	waiter "$next_section"
	print
	printf "%s\n" "Installing all available updates to macOS..." "A system restart may occur if required to complete installation." 'Would run `sudo softwareupdate --install`'
	waiter "$run_command"
	set -x
	/usr/bin/sudo /usr/sbin/softwareupdate --all --install --restart --no-scan
	{ set +x; }
fi

/bin/rm -f "${TMPDIR:-/tmp/}su.err"


# Conclusion
print
printf "\001\033[36m\002%s\001\033[0m\002 %s\n" "â¨€" "[Babble] All finished! Exiting..."
#printf "\n%s\n" "[ðŸ”„ Babble] All finished! Exiting..."
